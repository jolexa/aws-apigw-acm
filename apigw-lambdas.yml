# https://github.com/awslabs/serverless-application-model/tree/master/examples/2016-10-31/inline_swagger
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Two API Gateway Endpoints behind one custom domain

Parameters:
  DomainName:
    Type: String
  ZoneName:
    Type: String
  Bucket:
    Type: String
  md5:
    Type: String

Resources:
  NodeApi:
    Type: AWS::Serverless::Api
    Properties:
        StageName: prod
        DefinitionBody:
            swagger: 2.0
            info:
                title: !Sub "${AWS::StackName}-node"
            paths:
              "/":
                get:
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NodeFunction.Arn}/invocations
                  responses: {}
            swagger: '2.0'

  NodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: hello-js.handler
      Runtime: nodejs4.3
      Timeout: 1
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5 # This is public readable
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref NodeApi

  PythonApi:
    Type: AWS::Serverless::Api
    Properties:
        StageName: prod
        DefinitionBody:
            swagger: 2.0
            info:
              title: !Sub "${AWS::StackName}-python"
            paths:
              "/":
                get:
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonFunction.Arn}/invocations
                  responses: {}
            swagger: '2.0'

  PythonFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: hello.handler
      Runtime: python2.7
      Timeout: 1
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5 # This is public readable
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref PythonApi

  CustomDomainRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Sid: 'Lambda'
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/cfn/"
      Policies:
      - PolicyName: DomainNames
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - apigateway:POST
            Resource:
            - !Sub "arn:aws:apigateway:${AWS::Region}::/domainnames"
          - Effect: Allow
            Action:
            - apigateway:DELETE
            Resource:
            - !Sub "arn:aws:apigateway:${AWS::Region}::/domainnames/*"
          - Effect: Allow
            Action:
            - cloudfront:UpdateDistribution
            - acm:ListCertificates
            Resource: '*'

  CustomDomain:
    Type: Custom::DomainName
    Properties:
        ServiceToken: !GetAtt CustomDomainFunction.Arn
        DomainName: !Ref DomainName

  CustomDomainFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom Cloudformation Resource for Custom API GW Domains
      Runtime: python2.7
      Handler: index.handler
      Role: !GetAtt CustomDomainRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          # NOTE: https://forums.aws.amazon.com/message.jspa?messageID=769627

          import logging
          import json
          import boto3
          import cfnresponse
          from botocore.exceptions import ClientError

          logging.basicConfig()
          logging.getLogger('boto3').setLevel(logging.CRITICAL)
          logging.getLogger('botocore').setLevel(logging.CRITICAL)
          logger = logging.getLogger("mylogger")
          logger.setLevel(logging.INFO)

          def handler(event, context):
              client = boto3.client('apigateway')
              logger.info(json.dumps(event, indent=2))

              ResponseURL=event['ResponseURL']
              StackId=event['StackId']
              RequestId=event['RequestId']
              ResourceType=event['ResourceType']
              RequestType=event['RequestType']
              LogicalResourceId=event['LogicalResourceId']
              PhysicalResourceId=event.get('PhysicalResourceId')
              responseData = {}
              DomainName=event['ResourceProperties']['DomainName']

              responsecode = 'SUCCESS' # default to working
              if RequestType == "Create":
                  certs = boto3.client('acm', region_name='us-east-1').list_certificates()
                  for i in certs['CertificateSummaryList']:
                      if i['DomainName'] == DomainName:
                          ACMCertArn = i['CertificateArn']
                  response = client.create_domain_name(
                      domainName=DomainName,
                      certificateArn=ACMCertArn
                  )
                  responseData['distributionDomainName'] = response['distributionDomainName']
              elif RequestType == "Update":
                  OldDomainName=event['OldResourceProperties']['DomainName']
                  certs = boto3.client('acm', region_name='us-east-1').list_certificates()
                  for i in certs['CertificateSummaryList']:
                      if i['DomainName'] == DomainName:
                          ACMCertArn = i['CertificateArn']
                  try:
                    response = client.create_domain_name(
                        domainName=DomainName,
                        certificateArn=ACMCertArn
                    )
                    responseData['distributionDomainName'] = response['distributionDomainName']
                    # Not sure if this delete should be here or not
                    delete = client.delete_domain_name(
                        domainName=OldDomainName
                        )
                  except ClientError as e:
                      if e.response['Error']['Code'] == 'BadRequestException':
                          print("Domain Duplicated, limitation of AWS/CloudFront...wait longer")
                          responsecode = 'FAILED'

              elif RequestType == "Delete":
                  try:
                    response = client.delete_domain_name(
                        domainName=DomainName
                        )
                  except ClientError as e:
                      if e.response['Error']['Code'] == 'NotFoundException':
                          print("Domain Not Found, sending success reponse anyway")
              # magic cfnresponse, heh
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
              cfnresponse.send(event, context, responsecode,
                  responseData, "CustomDomainPhysicalID")

  AliasDNSEntry:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CustomDomain.distributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront zone id hardcoded by design
      HostedZoneName: !Ref ZoneName
      Name: !Ref DomainName
      Type: A
  AliasDNSEntry6:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CustomDomain.distributionDomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront zone id hardcoded by design
      HostedZoneName: !Ref ZoneName
      Name: !Ref DomainName
      Type: AAAA

  NodeBasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    DependsOn:
      - NodeApiprodStage
      - CustomDomain
    Properties:
      BasePath: node
      DomainName: !Ref DomainName
      RestApiId: !Ref NodeApi
      Stage: prod
  PythonBasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    DependsOn:
      - PythonApiprodStage
      - CustomDomain
    Properties:
      BasePath: python
      DomainName: !Ref DomainName
      RestApiId: !Ref PythonApi
      Stage: prod
